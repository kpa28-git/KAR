//          _     _
//    ___  (_)___(_)
//   / _ \/ / __/ /
//  /_//_/_/_/ /_/
// niri (wayland compositor) config
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// find monitors by running `niri msg outputs`
output "eDP-1" { // built-in laptop monitor
    // mode "1920x1080@120.030"
    scale 2
    transform "normal"
    position x=1280 y=0
}

output "DP-3" {
    // mode "3840x2160@120.030"
    scale 1.6
    transform "normal"
}

input {
    focus-follows-mouse

    keyboard {
        xkb {
            layout "us"
            options "caps:swapescape,caps:super,altwin:menu_win" // see: xkeyboard-config(7)
        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="0%"
}

layout {
    gaps 8 // gaps around windows in logical pixels

    // When to center a column when changing focus
    center-focused-column "never" // "never", "always", "on-overflow"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // off
        width 2 // How many logical pixels the ring extends out from the windows. 
        active-color "#7fc8ff"
        inactive-color "#505050"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        // Changing the color space is also supported, check the wiki for more info.
        //
        // active-gradient from="#80c8ff" to="#bbddff" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        off

        width 4
        // active-color "#ffc87f"
        // inactive-color "#505050"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // Left and right: cause the next window to the side to always be visible
    // Top and bottom: add outer gaps
    struts {
        left 4
        right 4
        top 4
        bottom 4
    }
}

// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

screenshot-path "~/Pictures/screenshots/ss_%Y-%m-%dT%H:%M:%S.png"
// screenshot-path null // disables screenshot saving to disk

animations {
    // off
    // slowdown 1.0 // values below 1 speed animations up
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Enable rounded corners
window-rule {
    geometry-corner-radius 02
    clip-to-geometry true
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name.
    // To find an XKB name for a particular key, use a program like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.

    // Basic
    Mod+F1 { show-hotkey-overlay; } // Help
    Mod+Q { close-window; }
    Super+Y { spawn "sh" "-c" "tprompty 'Lock?' swaylock"; }
    Mod+Shift+Y { spawn "sh" "-c" "tprompty 'Logout?' 'niri msg action quit -s'"; }
    Mod+Z { power-off-monitors; }
    Super+Shift+Z { spawn "sh" "-c" "tprompty 'Shutdown?' 'sudo -A shutdown -h now'"; }
    Super+Shift+Backspace { spawn "sh" "-c" "tprompty 'Reboot?' 'sudo -A reboot'"; }

    // Mod+Shift+X { quit; }
    // Ctrl+Alt+Delete { quit; }

    // Programs
    Mod+Return { spawn "sh" "-c" "$TERMINAL"; }
    Mod+Shift+Return { spawn "sh" "-c" "niri msg action spawn -- $TERMINAL && niri msg action consume-or-expel-window-left"; }
    // Mod+Shift+Comma { spawn "sh" "-c" "niri msg action spawn -- alacritty && niri msg action consume-or-expel-window-left"; }
    // Mod+Shift+Period { spawn "sh" "-c" "niri msg action spawn -- alacritty && niri msg action consume-or-expel-window-left"; }
    Mod+R { spawn "tofi-drun"; } // (R)unner
    Mod+B { spawn "firefox"; } // B(rowser)
    Mod+A { spawn "sh" "-c" "alacritty -e pulsemixer"; } // A(udio)
    Mod+F { spawn "sh" "-c" "alacritty -e $FILE"; } // F(ile manager)
    Mod+I { spawn "sh" "-c" "alacritty -e btop"; } // I(nfo)
    Mod+T { spawn "sh" "-c" "$TASK_CLIENT"; } // T(ask)
    Mod+E { spawn "sh" "-c" "$EMAIL_CLIENT"; } // E(mail)
    Mod+M { spawn "sh" "-c" "alacritty -e cmus"; } // M(usic)
    Mod+Grave { spawn "tessen"; }
    Mod+F12 { spawn "sh" "-c" "alacritty -e nmtui"; }

    // Audio Controls (Pipewire / WirePlumber)
    Mod+Equal allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    Mod+Minus allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }

    Mod+Shift+Equal allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.3+"; }
    Mod+Shift+Minus allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.3-"; }

    Mod+Shift+M allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    // Focus
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Shift+Left  { consume-or-expel-window-left; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Right { consume-or-expel-window-right; }
    Mod+Shift+H     { consume-or-expel-window-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { consume-or-expel-window-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }

    Mod+Ctrl+Left  { focus-monitor-left; }
    Mod+Ctrl+Down  { focus-monitor-down; }
    Mod+Ctrl+Up    { focus-monitor-up; }
    Mod+Ctrl+Right { focus-monitor-right; }
    Mod+Ctrl+H     { focus-monitor-left; }
    Mod+Ctrl+J     { focus-monitor-down; }
    Mod+Ctrl+K     { focus-monitor-up; }
    Mod+Ctrl+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+S               { focus-workspace-up; }
    Mod+X               { focus-workspace-down; }
    Mod+Page_Up         { focus-workspace-up; }
    Mod+Page_Down       { focus-workspace-down; }

    Mod+Shift+S         { move-column-to-workspace-up; }
    Mod+Shift+X         { move-column-to-workspace-down; }
    Mod+Shift+Page_Up   { move-column-to-workspace-up; }
    Mod+Shift+Page_Down { move-column-to-workspace-down; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Ctrl+S         { move-workspace-up; }
    Mod+Ctrl+X         { move-workspace-down; }
    Mod+Ctrl+Page_Up   { move-workspace-up; }
    Mod+Ctrl+Page_Down { move-workspace-down; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=100 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=100 { focus-workspace-up; }
    Mod+Shift+WheelScrollDown cooldown-ms=100 { move-column-to-workspace-down; }
    Mod+Shift+WheelScrollUp   cooldown-ms=100 { move-column-to-workspace-up; }

    // Mod+WheelScrollRight      { focus-column-right; }
    // Mod+WheelScrollLeft       { focus-column-left; }
    // Mod+Ctrl+WheelScrollRight { move-column-right; }
    // Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Ctrl+WheelScrollDown      { focus-column-right; }
    Mod+Ctrl+WheelScrollUp        { focus-column-left; }
    Mod+Shift+Ctrl+WheelScrollDown { move-column-right; }
    Mod+Shift+Ctrl+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    Mod+BracketLeft  { move-column-left; }
    Mod+BracketRight { move-column-right; }

    // Consume one window from the right to the bottom of the focused column.
    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    // Mod+R { switch-preset-column-width; }
    // Mod+Shift+R { switch-preset-window-height; }
    // Mod+Ctrl+R { reset-window-height; }
    Mod+w { maximize-column; }         // (W)iden
    Mod+Shift+f { fullscreen-window; } // (F)ullscreen
    Mod+C { center-column; }

    // Finer width/height adjustments.
    // Mod+Minus { set-column-width "-10%"; }
    // Mod+Equal { set-column-width "+10%"; }
    // Mod+Shift+Minus { set-window-height "-10%"; }
    // Mod+Shift+Equal { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }
}
